name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# env:
#   AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
#   AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Create .env file
      run: |
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env

        echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
        echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env

        echo "DB_HOST_PROD=${{ secrets.DB_HOST_PROD }}" >> .env
        echo "DB_NAME_PROD=${{ secrets.DB_NAME_PROD }}" >> .env

        echo "DEBUG=${{ secrets.DEBUG }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env

        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env

        echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: arsenydeveloper/django-movie-dev:latest
    - name: Install the compose-cli
      run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
    - name: Deploy to ECS
      run: |
        export AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
        export AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
        docker context create ecs django --from-env
        docker context use django
        docker compose --verbose -f docker-compose-prod.yml up
